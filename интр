import sqlite3
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from tkinter.font import Font


conn = sqlite3.connect('notes.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS notes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    note TEXT, 
                    priority INTEGER)''')


PRIORITY_NAMES = {
    0: "Отсутствует",
    1: "Низкий",
    2: "Средний",
    3: "Высокий"
}

PRIORITY_COLORS = {
    0: "#f0f0f0",  # серый
    1: "#d4edda",  # светло-зеленый
    2: "#fff3cd",  # светло-желтый
    3: "#f8d7da"   # светло-красный
}


root = Tk()
root.title("Менеджер заметок")
root.geometry('800x600')
root.configure(bg='#f5f5f5')


title_font = Font(family="Arial", size=12, weight="bold")
button_font = Font(family="Arial", size=10)


header_frame = Frame(root, bg='#343a40', padx=10, pady=10)
header_frame.pack(fill=X)

input_frame = Frame(root, bg='#f5f5f5', padx=10, pady=10)
input_frame.pack(fill=X)

button_frame = Frame(root, bg='#f5f5f5', padx=10, pady=5)
button_frame.pack(fill=X)

table_frame = Frame(root, bg='#f5f5f5', padx=10, pady=10)
table_frame.pack(fill=BOTH, expand=True)


Label(header_frame,
      text="Менеджер заметок с приоритетами",
      font=title_font,
      fg='white',
      bg='#343a40').pack(side=LEFT)


Label(input_frame,
      text="Текст заметки:",
      bg='#f5f5f5').grid(row=0, column=0, padx=5, pady=5, sticky=W)

note_entry = Entry(input_frame, width=50, font=('Arial', 11))
note_entry.grid(row=0, column=1, padx=5, pady=5, sticky=W)

Label(input_frame,
      text="Приоритет:",
      bg='#f5f5f5').grid(row=1, column=0, padx=5, pady=5, sticky=W)

priority_var = IntVar(value=1)

priority_frame = Frame(input_frame, bg='#f5f5f5')
priority_frame.grid(row=1, column=1, padx=5, pady=5, sticky=W)


for text, value in [(PRIORITY_NAMES[0], 0), (PRIORITY_NAMES[1], 1),
                    (PRIORITY_NAMES[2], 2), (PRIORITY_NAMES[3], 3)]:
    Radiobutton(priority_frame,
                text=text,
                variable=priority_var,
                value=value,
                bg='#f5f5f5',
                activebackground='#f5f5f5').pack(side=LEFT, padx=5)


def create_button(frame, text, command, color):
    return Button(frame,
                 text=text,
                 command=command,
                 bg=color,
                 fg='white',
                 font=button_font,
                 relief=FLAT,
                 padx=10)

add_button = create_button(button_frame, "Добавить", lambda: add_note(), '#28a745')
update_button = create_button(button_frame, "Обновить", lambda: update_note(), '#ffc107')
delete_button = create_button(button_frame, "Удалить", lambda: delete_note(), '#dc3545')
refresh_button = create_button(button_frame, "Обновить список", lambda: show_notes(), '#17a2b8')

add_button.pack(side=LEFT, padx=5)
update_button.pack(side=LEFT, padx=5)
delete_button.pack(side=LEFT, padx=5)
refresh_button.pack(side=LEFT, padx=5)


tree = ttk.Treeview(table_frame,
                   columns=("ID", "Note", "Priority"),
                   show="headings",
                   selectmode="browse")

vsb = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
hsb = ttk.Scrollbar(table_frame, orient="horizontal", command=tree.xview)
tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)

tree.grid(row=0, column=0, sticky="nsew")
vsb.grid(row=0, column=1, sticky="ns")
hsb.grid(row=1, column=0, sticky="ew")

table_frame.grid_rowconfigure(0, weight=1)
table_frame.grid_columnconfigure(0, weight=1)


tree.heading("ID", text="ID", anchor=CENTER)
tree.heading("Note", text="Заметка", anchor=CENTER)
tree.heading("Priority", text="Приоритет", anchor=CENTER)

tree.column("ID", width=50, anchor=CENTER)
tree.column("Note", width=400, anchor=W)
tree.column("Priority", width=100, anchor=CENTER)


style = ttk.Style()
style.theme_use("clam")
style.configure("Treeview",
                background="#ffffff",
                fieldbackground="#ffffff",
                foreground="#000000",
                rowheight=25)
style.configure("Treeview.Heading",
                background="#343a40",
                foreground="white",
                font=('Arial', 10, 'bold'))
style.map("Treeview", background=[('selected', '#007bff')])


def show_notes():
    """Отображает все заметки в таблице"""
    for row in tree.get_children():
        tree.delete(row)

    cursor.execute("SELECT * FROM notes ORDER BY priority DESC, id ASC")
    rows = cursor.fetchall()

    for row in rows:
        priority_name = PRIORITY_NAMES.get(row[2], "Неизвестно")
        tree.insert("", "end", values=(row[0], row[1], priority_name), tags=(row[2],))
        tree.tag_configure(row[2], background=PRIORITY_COLORS.get(row[2], "#ffffff"))

def add_note():
    """Добавляет новую заметку"""
    note_text = note_entry.get()
    priority_value = priority_var.get()

    if note_text:
        try:
            cursor.execute("INSERT INTO notes (note, priority) VALUES (?, ?)",
                           (note_text, priority_value))
            conn.commit()
            show_notes()
            note_entry.delete(0, END)
        except sqlite3.Error as e:
            messagebox.showerror("Ошибка", f"Ошибка базы данных: {e}")
    else:
        messagebox.showwarning("Предупреждение", "Введите текст заметки")

def update_note():
    """Обновляет выбранную заметку"""
    selected_item = tree.selection()
    if selected_item:
        item = tree.item(selected_item)
        note_id = item['values'][0]
        note_text = note_entry.get()
        priority_value = priority_var.get()

        if note_text:
            cursor.execute("UPDATE notes SET note=?, priority=? WHERE id=?",
                           (note_text, priority_value, note_id))
            conn.commit()
            show_notes()
            note_entry.delete(0, END)
        else:
            messagebox.showwarning("Предупреждение", "Введите текст заметки")
    else:
        messagebox.showwarning("Предупреждение", "Выберите заметку для обновления")

def delete_note():
    """Удаляет выбранную заметку"""
    selected_item = tree.selection()
    if selected_item:
        if messagebox.askyesno("Подтверждение", "Удалить выбранную заметку?"):
            item = tree.item(selected_item)
            note_id = item['values'][0]

            cursor.execute("DELETE FROM notes WHERE id=?", (note_id,))
            conn.commit()
            show_notes()
            note_entry.delete(0, END)
    else:
        messagebox.showwarning("Предупреждение", "Выберите заметку для удаления")

def on_tree_select(event):
    """Обработчик выбора строки в таблице"""
    selected_item = tree.selection()
    if selected_item:
        item = tree.item(selected_item)
        note_entry.delete(0, END)
        note_entry.insert(0, item['values'][1])

        for priority, name in PRIORITY_NAMES.items():
            if name == item['values'][2]:
                priority_var.set(priority)
                break


tree.bind('<<TreeviewSelect>>', on_tree_select)


show_notes()


root.mainloop()
conn.close()
